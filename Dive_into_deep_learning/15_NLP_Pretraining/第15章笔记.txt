15.3节笔记
    此处学会DataLoader的collate_fn参数使用，利用batchify函数来处理从PTBDataset.__getitem__输入进来的数据
        def batchify(data):
            """Return a minibatch of examples for skip-gram with negative sampling."""
            max_len = max(len(c) + len(n) for _, c, n in data)
            centers, contexts_negatives, masks, labels = [], [], [], []
            for center, context, negative in data:
                cur_len = len(context) + len(negative)
                centers += [center]
                contexts_negatives += [context + negative + [0] * (max_len - cur_len)]
                masks += [[1] * cur_len + [0] * (max_len - cur_len)]
                labels += [[1] * len(context) + [0] * (max_len - len(context))]
            return (torch.tensor(centers).reshape((-1, 1)), torch.tensor(
                contexts_negatives), torch.tensor(masks), torch.tensor(labels))

        class PTBDataset(torch.utils.data.Dataset):
            def __init__(self, centers, contexts, negatives):
                assert len(centers) == len(contexts) == len(negatives)
                self.centers = centers
                self.contexts = contexts
                self.negatives = negatives

            def __getitem__(self, index):
                return (self.centers[index], self.contexts[index],
                        self.negatives[index])

            def __len__(self):
                return len(self.centers)

        dataset = PTBDataset(all_centers, all_contexts, all_negatives)
        # TODO 在学习阶段，此处num_workers设置为0或直接省略，不然报错
        data_iter = torch.utils.data.DataLoader(dataset, batch_size, shuffle=True,
                                                collate_fn=batchify,
                                                num_workers=0)

15.4节笔记
1.
    binary_cross_entropy和binary_cross_entropy_with_logits相似但不同
    相同：都需要target在0~1之间，
    不同：binary_cross_entropy的input需要在0~1之间（需要提前用sigmod函数）被称为概率值，或者logits；
2.
    关于weight参数：weight的shape和inputs的shape相同，loss计算后对应元素需要乘以weight的对应元素；
    此时若reduction=None，则返回和input一样的shape
    具体见：https://blog.csdn.net/code_plus/article/details/115739343

3.
    torch.numel(input) # 获取input里面有多少个元素


4. 余弦相似度、矩阵和向量相乘
            cos = torch.mv(W, x) / torch.sqrt(torch.sum(W * W, dim=1) *
                                              torch.sum(x * x) + 1e-9)
            # torch.topk返回类元组，第一个是值，第二个是值对应的索引；真实使用时用索引比较多，所以取[1]
            topk = torch.topk(cos, k=k+1)[1].cpu().numpy().astype('int32')